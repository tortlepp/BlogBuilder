package eu.ortlepp.blogbuilder.gui;

import eu.ortlepp.blogbuilder.BlogBuilder;
import eu.ortlepp.blogbuilder.action.Action;
import eu.ortlepp.blogbuilder.action.Build;
import eu.ortlepp.blogbuilder.action.Initialize;

import java.io.Serializable;
import java.util.prefs.Preferences;

/**
 * The controller for the GUI window. Manages all actions triggered in the GUI.
 *
 * @author Thorsten Ortlepp
 * @since 0.8
 */
class Controller implements Serializable {

    /** Serial Version UID. Generated by Eclipse IDE. */
    private static final long serialVersionUID = 1947826455012037689L;

    /** The name of the configuration key (for the preferences API). */
    private static final String CONFIG_NODE = BlogBuilder.class.getPackage().getName();

    /** The configuration key for the last opened project. */
    private static final String KEY_LAST = "project.last";

    /** The project that is currently opened. Empty if no project is opened. */
    private String project;

    /** Indicator for activity. Is false if no action is in progress and true if an action is in progress. */
    boolean active;


    /**
     * Constructor, initializes the controller. If a project was opened before, it is restored.
     */
    public Controller() {
        final Preferences preferences = Preferences.userRoot().node(CONFIG_NODE);
        project = preferences.get(KEY_LAST, "");
        active = false;
    }


    /**
     * Getter for the currently opened project. Returns "none" in case no project is open.
     *
     * @return The currently opened project
     */
    public String getProject() {
        if (project.isEmpty()) {
            return "none";
        }
        return project;
    }


    /**
     * Setter for the currently opened project.
     *
     * @param project The currently opened project
     */
    public void setProject(final String project) {
        this.project = project;
    }


    /**
     * Save the currently opened project (only if a project is open).
     */
    public void saveProject() {
        if (!project.isEmpty()) {
            final Preferences preferences = Preferences.userRoot().node(CONFIG_NODE);
            preferences.put(KEY_LAST, project);
        }
    }


    /**
     * Returns the current status of activity. Returns false if no action is in progress
     * and true if an action is in progress.
     *
     * @return The current status of activity
     */
    public boolean isActive() {
        return active;
    }


    /**
     * Run the initialization action. The action runs in a separate thread. The action is only
     * started when a project was opened before.
     */
    public void runInitialization() {
        if (!project.isEmpty()) {
            runAction(new RunAction(new Initialize(project)));
        }
    }


    /**
     * Run the build action. The action runs in a separate thread. The action is only started
     * when a project was opened before.
     */
    public void runBuild() {
        if (!project.isEmpty()) {
            runAction(new RunAction(new Build(project)));
        }
    }


    /**
     * Run an action. The action will run in a separate thread.
     *
     * @param action The action to run
     */
    private void runAction(final RunAction action) {
        active = true;
        new Thread(action).start();
    }






    /**
     * Runner for actions. Run an action as Runnable.
     *
     * @author Thorsten Ortlepp
     * @since 0.8
     */
    private class RunAction implements Runnable {

        /** The action to run. */
        private final Action action;

        /**
         * Initialize the runner.
         *
         * @param action The action to run
         */
        public RunAction(final Action action) {
            super();
            this.action = action;
        }

        @Override
        public void run() {
            action.run();
            active = false;
        }
    }

}
